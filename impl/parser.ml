type token =
  | TYPE of (Support.Error.info)
  | INERT of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | TTOP of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | TBOT of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | AS of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | REF of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | RREF of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | SSOURCE of (Support.Error.info)
  | SSINK of (Support.Error.info)
  | NAT of (Support.Error.info)
  | MVAR of (Support.Error.info)
  | MMVAR of (Support.Error.info)
  | FORK of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)
  | EQLLT of (Support.Error.info)
  | KNDU of (Support.Error.info)
  | KNDA of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
# 89 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* TYPE *);
  258 (* INERT *);
  259 (* LAMBDA *);
  260 (* TTOP *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* TRUE *);
  265 (* FALSE *);
  266 (* BOOL *);
  267 (* TBOT *);
  268 (* LET *);
  269 (* IN *);
  270 (* FIX *);
  271 (* LETREC *);
  272 (* CASE *);
  273 (* OF *);
  274 (* AS *);
  275 (* USTRING *);
  276 (* UNIT *);
  277 (* REF *);
  278 (* UUNIT *);
  279 (* RREF *);
  280 (* TIMESFLOAT *);
  281 (* SUCC *);
  282 (* PRED *);
  283 (* ISZERO *);
  284 (* UFLOAT *);
  285 (* SSOURCE *);
  286 (* SSINK *);
  287 (* NAT *);
  288 (* MVAR *);
  289 (* MMVAR *);
  290 (* FORK *);
  291 (* UCID *);
  292 (* LCID *);
  293 (* INTV *);
  294 (* FLOATV *);
  295 (* STRINGV *);
  296 (* APOSTROPHE *);
  297 (* DQUOTE *);
  298 (* ARROW *);
  299 (* BANG *);
  300 (* BARGT *);
  301 (* BARRCURLY *);
  302 (* BARRSQUARE *);
  303 (* COLON *);
  304 (* COLONCOLON *);
  305 (* COLONEQ *);
  306 (* COLONHASH *);
  307 (* COMMA *);
  308 (* DARROW *);
  309 (* DDARROW *);
  310 (* DOT *);
    0 (* EOF *);
  311 (* EQ *);
  312 (* EQEQ *);
  313 (* EXISTS *);
  314 (* GT *);
  315 (* HASH *);
  316 (* LCURLY *);
  317 (* LCURLYBAR *);
  318 (* LEFTARROW *);
  319 (* LPAREN *);
  320 (* LSQUARE *);
  321 (* LSQUAREBAR *);
  322 (* LT *);
  323 (* RCURLY *);
  324 (* RPAREN *);
  325 (* RSQUARE *);
  326 (* SEMI *);
  327 (* SLASH *);
  328 (* STAR *);
  329 (* TRIANGLE *);
  330 (* USCORE *);
  331 (* VBAR *);
  332 (* EQLLT *);
  333 (* KNDU *);
  334 (* KNDA *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\006\000\006\000\005\000\
\005\000\007\000\007\000\007\000\007\000\007\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\004\000\004\000\008\000\008\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\014\000\014\000\014\000\010\000\010\000\
\016\000\016\000\017\000\017\000\015\000\015\000\019\000\019\000\
\013\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\020\000\020\000\021\000\
\021\000\022\000\022\000\012\000\012\000\023\000\000\000"

let yylen = "\002\000\
\001\000\003\000\001\000\002\000\002\000\001\000\001\000\002\000\
\002\000\001\000\002\000\002\000\002\000\002\000\003\000\001\000\
\001\000\001\000\001\000\003\000\003\000\001\000\001\000\001\000\
\001\000\000\000\002\000\006\000\001\000\001\000\006\000\006\000\
\006\000\006\000\006\000\008\000\004\000\003\000\003\000\002\000\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\002\000\002\000\002\000\003\000\003\000\001\000\000\000\001\000\
\001\000\003\000\003\000\001\000\003\000\001\000\001\000\003\000\
\005\000\003\000\004\000\001\000\001\000\001\000\001\000\003\000\
\007\000\001\000\001\000\001\000\001\000\000\000\001\000\001\000\
\003\000\003\000\001\000\001\000\003\000\007\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\070\000\000\000\
\000\000\000\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\077\000\076\000\074\000\
\000\000\001\000\000\000\000\000\000\000\000\000\087\000\000\000\
\003\000\000\000\071\000\000\000\054\000\000\000\000\000\000\000\
\000\000\068\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\000\000\004\000\000\000\000\000\005\000\000\000\000\000\000\000\
\000\000\079\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\018\000\019\000\
\022\000\023\000\000\000\024\000\000\000\000\000\025\000\000\000\
\016\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\027\000\008\000\009\000\000\000\000\000\072\000\000\000\000\000\
\066\000\000\000\002\000\000\000\000\000\052\000\053\000\061\000\
\011\000\013\000\014\000\012\000\000\000\060\000\000\000\056\000\
\000\000\000\000\000\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\082\000\000\000\
\083\000\081\000\064\000\000\000\000\000\020\000\000\000\015\000\
\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\059\000\058\000\006\000\007\000\
\000\000\031\000\032\000\033\000\034\000\035\000\000\000\000\000\
\085\000\000\000\000\000\000\000\000\000\073\000\028\000\036\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\031\000\032\000\033\000\058\000\061\000\169\000\126\000\094\000\
\095\000\127\000\034\000\141\000\035\000\036\000\037\000\128\000\
\129\000\038\000\069\000\065\000\066\000\067\000\142\000"

let yysindex = "\002\000\
\001\000\000\000\211\254\230\254\149\003\000\000\000\000\234\254\
\035\004\243\254\149\003\000\000\035\004\035\004\035\004\035\004\
\035\004\035\004\224\254\232\254\227\254\000\000\000\000\000\000\
\035\004\000\000\205\003\149\003\009\255\035\004\000\000\233\254\
\000\000\096\003\000\000\253\254\000\000\038\255\122\004\010\255\
\011\255\000\000\056\255\008\255\012\255\253\254\018\255\051\255\
\253\254\025\004\253\254\253\254\253\254\253\254\149\003\000\000\
\122\004\000\000\122\004\149\003\000\000\253\254\014\255\019\255\
\015\255\000\000\024\255\006\255\013\255\022\255\253\254\001\000\
\249\003\249\003\253\254\002\255\122\004\000\000\000\000\000\000\
\000\000\000\000\152\004\000\000\152\004\152\004\000\000\152\004\
\000\000\083\004\122\004\083\004\016\255\000\000\036\255\122\004\
\122\004\149\003\149\003\149\003\122\004\017\255\253\254\019\255\
\000\000\000\000\000\000\149\003\149\003\000\000\205\003\149\003\
\000\000\149\003\000\000\035\004\035\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\255\000\000\021\255\000\000\
\039\255\023\255\034\255\000\000\030\255\040\255\046\255\096\255\
\097\255\100\255\054\255\080\255\000\000\044\255\000\000\055\255\
\000\000\000\000\000\000\063\255\122\004\000\000\083\004\000\000\
\000\000\228\254\149\003\149\003\149\003\149\003\149\003\149\003\
\068\255\017\255\000\000\106\255\000\000\000\000\000\000\000\000\
\058\255\000\000\000\000\000\000\000\000\000\000\114\255\092\255\
\000\000\122\004\152\004\149\003\071\255\000\000\000\000\000\000\
\077\255\249\003\035\004"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\255\180\255\000\000\000\000\000\000\
\000\000\000\000\065\255\000\000\000\000\000\000\000\000\000\000\
\000\000\029\255\000\000\110\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\181\000\000\000\000\000\
\252\000\000\000\067\001\138\001\209\001\024\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\095\002\035\255\066\255\
\000\000\000\000\067\255\069\255\000\000\000\000\166\002\000\000\
\000\000\000\000\237\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\072\255\000\000\078\255\000\000\000\000\136\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\074\000\145\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\213\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\158\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\163\255"

let yygindex = "\000\000\
\063\000\000\000\006\000\000\000\000\000\000\000\219\255\217\255\
\200\255\054\000\195\255\241\255\129\000\247\255\000\000\255\255\
\000\000\000\000\040\000\000\000\044\000\000\000\000\000"

let yytablesize = 1498
let yytable = "\046\000\
\026\000\093\000\001\000\049\000\050\000\051\000\052\000\053\000\
\054\000\040\000\043\000\116\000\117\000\044\000\057\000\062\000\
\048\000\059\000\039\000\105\000\071\000\106\000\047\000\057\000\
\075\000\060\000\121\000\055\000\122\000\123\000\057\000\124\000\
\064\000\068\000\030\000\030\000\068\000\118\000\119\000\120\000\
\103\000\030\000\068\000\068\000\070\000\030\000\072\000\041\000\
\167\000\168\000\076\000\045\000\068\000\130\000\068\000\077\000\
\096\000\097\000\134\000\135\000\104\000\098\000\099\000\139\000\
\101\000\107\000\100\000\102\000\108\000\109\000\068\000\068\000\
\068\000\068\000\111\000\112\000\114\000\133\000\149\000\030\000\
\113\000\110\000\140\000\068\000\132\000\068\000\030\000\150\000\
\068\000\151\000\152\000\153\000\154\000\155\000\068\000\030\000\
\030\000\068\000\030\000\156\000\068\000\068\000\157\000\136\000\
\137\000\138\000\075\000\075\000\160\000\158\000\068\000\165\000\
\159\000\143\000\144\000\161\000\145\000\068\000\162\000\148\000\
\164\000\163\000\176\000\178\000\187\000\179\000\180\000\181\000\
\185\000\186\000\026\000\078\000\083\000\080\000\115\000\055\000\
\063\000\029\000\055\000\183\000\182\000\029\000\029\000\029\000\
\029\000\131\000\177\000\056\000\029\000\166\000\000\000\147\000\
\029\000\029\000\146\000\029\000\000\000\000\000\000\000\000\000\
\170\000\171\000\172\000\173\000\174\000\175\000\000\000\000\000\
\086\000\086\000\000\000\029\000\029\000\029\000\029\000\086\000\
\000\000\075\000\000\000\086\000\000\000\068\000\000\000\000\000\
\029\000\184\000\029\000\068\000\068\000\029\000\029\000\000\000\
\000\000\029\000\000\000\029\000\000\000\068\000\029\000\068\000\
\000\000\029\000\029\000\029\000\029\000\029\000\000\000\000\000\
\000\000\000\000\029\000\029\000\000\000\086\000\000\000\068\000\
\068\000\068\000\068\000\000\000\086\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\068\000\086\000\086\000\000\000\
\086\000\068\000\000\000\000\000\000\000\086\000\000\000\068\000\
\000\000\000\000\068\000\000\000\000\000\068\000\000\000\000\000\
\000\000\068\000\000\000\000\000\000\000\000\000\000\000\068\000\
\000\000\000\000\003\000\004\000\000\000\005\000\000\000\000\000\
\006\000\007\000\000\000\000\000\008\000\000\000\009\000\010\000\
\011\000\000\000\000\000\000\000\012\000\013\000\000\000\000\000\
\014\000\015\000\016\000\017\000\000\000\000\000\000\000\000\000\
\018\000\000\000\019\000\020\000\021\000\022\000\023\000\024\000\
\062\000\000\000\000\000\025\000\062\000\062\000\062\000\062\000\
\000\000\000\000\000\000\062\000\000\000\000\000\000\000\062\000\
\000\000\000\000\062\000\000\000\027\000\000\000\000\000\028\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\000\062\000\062\000\062\000\062\000\000\000\038\000\
\038\000\000\000\000\000\000\000\000\000\000\000\038\000\062\000\
\000\000\062\000\038\000\000\000\062\000\000\000\000\000\000\000\
\062\000\000\000\062\000\000\000\000\000\062\000\000\000\000\000\
\062\000\062\000\062\000\000\000\062\000\000\000\000\000\041\000\
\000\000\062\000\062\000\041\000\041\000\041\000\041\000\000\000\
\000\000\000\000\041\000\000\000\038\000\000\000\041\000\000\000\
\000\000\041\000\000\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\038\000\000\000\038\000\
\000\000\041\000\041\000\041\000\041\000\000\000\039\000\039\000\
\000\000\000\000\000\000\000\000\000\000\039\000\041\000\000\000\
\041\000\039\000\000\000\084\000\084\000\000\000\000\000\041\000\
\000\000\041\000\084\000\000\000\041\000\000\000\084\000\041\000\
\041\000\041\000\000\000\041\000\000\000\000\000\043\000\000\000\
\041\000\041\000\043\000\043\000\043\000\043\000\000\000\000\000\
\000\000\043\000\000\000\039\000\000\000\043\000\000\000\000\000\
\043\000\000\000\039\000\000\000\000\000\000\000\000\000\000\000\
\084\000\000\000\000\000\039\000\039\000\000\000\039\000\084\000\
\043\000\043\000\043\000\043\000\000\000\000\000\000\000\000\000\
\084\000\084\000\000\000\084\000\000\000\043\000\000\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\000\000\
\043\000\000\000\000\000\043\000\000\000\000\000\043\000\043\000\
\043\000\000\000\043\000\000\000\000\000\044\000\000\000\043\000\
\043\000\044\000\044\000\044\000\044\000\000\000\000\000\000\000\
\044\000\000\000\000\000\000\000\044\000\000\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\044\000\044\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\000\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\000\000\044\000\
\000\000\000\000\044\000\000\000\000\000\044\000\044\000\044\000\
\000\000\044\000\000\000\000\000\049\000\000\000\044\000\044\000\
\049\000\049\000\049\000\049\000\000\000\000\000\000\000\049\000\
\000\000\000\000\000\000\049\000\000\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\
\049\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\000\000\049\000\000\000\
\000\000\049\000\000\000\000\000\049\000\049\000\049\000\000\000\
\049\000\000\000\000\000\050\000\000\000\049\000\049\000\050\000\
\050\000\050\000\050\000\000\000\000\000\000\000\050\000\000\000\
\000\000\000\000\050\000\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\050\000\050\000\050\000\
\050\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\000\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\000\000\000\050\000\000\000\000\000\
\050\000\000\000\000\000\050\000\050\000\050\000\000\000\050\000\
\000\000\000\000\051\000\000\000\050\000\050\000\051\000\051\000\
\051\000\051\000\000\000\000\000\000\000\051\000\000\000\000\000\
\000\000\051\000\000\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\051\000\000\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\051\000\000\000\051\000\000\000\000\000\051\000\
\000\000\000\000\051\000\051\000\051\000\000\000\051\000\000\000\
\000\000\045\000\000\000\051\000\051\000\045\000\045\000\045\000\
\045\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\045\000\000\000\000\000\045\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\045\000\045\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\000\000\000\045\000\000\000\000\000\045\000\000\000\
\000\000\045\000\045\000\045\000\000\000\045\000\000\000\000\000\
\046\000\000\000\045\000\045\000\046\000\046\000\046\000\046\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\046\000\
\000\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\046\000\046\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\000\000\046\000\000\000\000\000\046\000\000\000\000\000\
\046\000\046\000\046\000\000\000\046\000\000\000\000\000\047\000\
\000\000\046\000\046\000\047\000\047\000\047\000\047\000\000\000\
\000\000\000\000\047\000\000\000\000\000\000\000\047\000\000\000\
\000\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\047\000\047\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\047\000\000\000\000\000\047\000\000\000\000\000\047\000\
\047\000\047\000\000\000\047\000\000\000\000\000\042\000\000\000\
\047\000\047\000\042\000\042\000\042\000\042\000\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\042\000\000\000\000\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\042\000\042\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\042\000\000\000\000\000\042\000\000\000\000\000\042\000\042\000\
\042\000\000\000\042\000\000\000\000\000\048\000\000\000\042\000\
\042\000\048\000\048\000\048\000\048\000\000\000\000\000\000\000\
\048\000\000\000\000\000\000\000\048\000\000\000\000\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\048\000\048\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\048\000\000\000\048\000\006\000\
\007\000\000\000\000\000\000\000\000\000\048\000\000\000\048\000\
\000\000\000\000\048\000\012\000\000\000\048\000\048\000\048\000\
\000\000\048\000\000\000\000\000\000\000\000\000\048\000\048\000\
\000\000\000\000\000\000\042\000\022\000\023\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\073\000\000\000\000\000\000\000\000\000\000\000\003\000\004\000\
\000\000\005\000\000\000\027\000\006\000\007\000\028\000\000\000\
\008\000\029\000\009\000\010\000\011\000\000\000\000\000\000\000\
\012\000\013\000\000\000\074\000\014\000\015\000\016\000\017\000\
\000\000\000\000\000\000\000\000\018\000\000\000\019\000\000\000\
\042\000\022\000\023\000\024\000\000\000\000\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\004\000\
\027\000\005\000\000\000\028\000\006\000\007\000\029\000\000\000\
\008\000\000\000\009\000\010\000\011\000\030\000\000\000\000\000\
\012\000\013\000\000\000\000\000\014\000\015\000\016\000\017\000\
\000\000\000\000\000\000\000\000\018\000\000\000\019\000\000\000\
\063\000\022\000\023\000\024\000\000\000\000\000\000\000\025\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\006\000\007\000\000\000\000\000\000\000\000\000\009\000\000\000\
\027\000\000\000\000\000\028\000\012\000\013\000\029\000\000\000\
\014\000\015\000\016\000\017\000\000\000\030\000\000\000\000\000\
\018\000\000\000\003\000\000\000\042\000\022\000\023\000\024\000\
\006\000\007\000\000\000\025\000\003\000\000\000\000\000\000\000\
\000\000\000\000\006\000\007\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\000\000\000\012\000\028\000\
\000\000\000\000\029\000\000\000\042\000\022\000\023\000\024\000\
\000\000\030\000\000\000\000\000\000\000\000\000\042\000\022\000\
\023\000\024\000\000\000\000\000\000\000\000\000\076\000\000\000\
\000\000\000\000\000\000\000\000\027\000\000\000\078\000\028\000\
\000\000\000\000\029\000\000\000\079\000\080\000\027\000\000\000\
\000\000\028\000\000\000\000\000\029\000\081\000\000\000\000\000\
\082\000\083\000\000\000\000\000\000\000\000\000\084\000\085\000\
\086\000\087\000\000\000\088\000\000\000\089\000\125\000\000\000\
\000\000\000\000\000\000\000\000\000\000\078\000\000\000\000\000\
\000\000\000\000\000\000\079\000\080\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\000\000\090\000\082\000\
\083\000\091\000\000\000\000\000\092\000\084\000\085\000\086\000\
\087\000\000\000\088\000\078\000\089\000\000\000\000\000\000\000\
\000\000\079\000\080\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\000\000\000\000\000\082\000\000\000\000\000\
\000\000\000\000\000\000\084\000\000\000\090\000\087\000\000\000\
\091\000\000\000\089\000\092\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\090\000\000\000\000\000\091\000\000\000\
\000\000\092\000"

let yycheck = "\009\000\
\000\000\039\000\001\000\013\000\014\000\015\000\016\000\017\000\
\018\000\036\001\005\000\073\000\074\000\036\001\058\001\025\000\
\011\000\047\001\064\001\057\000\030\000\059\000\036\001\067\001\
\034\000\055\001\083\000\060\001\085\000\086\000\055\001\088\000\
\027\000\028\000\006\001\007\001\002\001\036\001\037\001\077\000\
\050\000\013\001\008\001\009\001\036\001\017\001\070\001\074\001\
\077\001\078\001\054\001\074\001\018\001\091\000\020\001\018\001\
\047\001\047\001\096\000\097\000\055\000\006\001\055\001\101\000\
\047\001\060\000\055\001\017\001\055\001\051\001\036\001\037\001\
\038\001\039\001\051\001\070\001\055\001\042\001\047\001\051\001\
\068\001\067\001\066\001\049\001\069\001\051\001\058\001\067\001\
\054\001\051\001\068\001\058\001\063\001\054\001\060\001\067\001\
\068\001\063\001\070\001\054\001\066\001\067\001\007\001\098\000\
\099\000\100\000\116\000\117\000\055\001\013\001\076\001\149\000\
\013\001\108\000\109\000\036\001\111\000\112\000\075\001\114\000\
\058\001\067\001\055\001\018\001\186\000\068\001\013\001\036\001\
\058\001\053\001\070\001\067\001\067\001\067\001\072\000\058\001\
\068\001\002\001\067\001\179\000\178\000\006\001\007\001\008\001\
\009\001\092\000\162\000\019\000\013\001\151\000\255\255\112\000\
\017\001\018\001\111\000\020\001\255\255\255\255\255\255\255\255\
\155\000\156\000\157\000\158\000\159\000\160\000\255\255\255\255\
\006\001\007\001\255\255\036\001\037\001\038\001\039\001\013\001\
\255\255\187\000\255\255\017\001\255\255\002\001\255\255\255\255\
\049\001\180\000\051\001\008\001\009\001\054\001\055\001\255\255\
\255\255\058\001\255\255\060\001\255\255\018\001\063\001\020\001\
\255\255\066\001\067\001\068\001\069\001\070\001\255\255\255\255\
\255\255\255\255\075\001\076\001\255\255\051\001\255\255\036\001\
\037\001\038\001\039\001\255\255\058\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\067\001\068\001\255\255\
\070\001\054\001\255\255\255\255\255\255\075\001\255\255\060\001\
\255\255\255\255\063\001\255\255\255\255\066\001\255\255\255\255\
\255\255\070\001\255\255\255\255\255\255\255\255\255\255\076\001\
\255\255\255\255\002\001\003\001\255\255\005\001\255\255\255\255\
\008\001\009\001\255\255\255\255\012\001\255\255\014\001\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\002\001\255\255\255\255\043\001\006\001\007\001\008\001\009\001\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\017\001\
\255\255\255\255\020\001\255\255\060\001\255\255\255\255\063\001\
\255\255\255\255\066\001\255\255\255\255\255\255\255\255\255\255\
\255\255\073\001\036\001\037\001\038\001\039\001\255\255\006\001\
\007\001\255\255\255\255\255\255\255\255\255\255\013\001\049\001\
\255\255\051\001\017\001\255\255\054\001\255\255\255\255\255\255\
\058\001\255\255\060\001\255\255\255\255\063\001\255\255\255\255\
\066\001\067\001\068\001\255\255\070\001\255\255\255\255\002\001\
\255\255\075\001\076\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\013\001\255\255\051\001\255\255\017\001\255\255\
\255\255\020\001\255\255\058\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\255\255\036\001\037\001\038\001\039\001\255\255\006\001\007\001\
\255\255\255\255\255\255\255\255\255\255\013\001\049\001\255\255\
\051\001\017\001\255\255\006\001\007\001\255\255\255\255\058\001\
\255\255\060\001\013\001\255\255\063\001\255\255\017\001\066\001\
\067\001\068\001\255\255\070\001\255\255\255\255\002\001\255\255\
\075\001\076\001\006\001\007\001\008\001\009\001\255\255\255\255\
\255\255\013\001\255\255\051\001\255\255\017\001\255\255\255\255\
\020\001\255\255\058\001\255\255\255\255\255\255\255\255\255\255\
\051\001\255\255\255\255\067\001\068\001\255\255\070\001\058\001\
\036\001\037\001\038\001\039\001\255\255\255\255\255\255\255\255\
\067\001\068\001\255\255\070\001\255\255\049\001\255\255\051\001\
\255\255\255\255\255\255\255\255\255\255\255\255\058\001\255\255\
\060\001\255\255\255\255\063\001\255\255\255\255\066\001\067\001\
\068\001\255\255\070\001\255\255\255\255\002\001\255\255\075\001\
\076\001\006\001\007\001\008\001\009\001\255\255\255\255\255\255\
\013\001\255\255\255\255\255\255\017\001\255\255\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\038\001\039\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\255\255\051\001\255\255\
\255\255\255\255\255\255\255\255\255\255\058\001\255\255\060\001\
\255\255\255\255\063\001\255\255\255\255\066\001\067\001\068\001\
\255\255\070\001\255\255\255\255\002\001\255\255\075\001\076\001\
\006\001\007\001\008\001\009\001\255\255\255\255\255\255\013\001\
\255\255\255\255\255\255\017\001\255\255\255\255\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\036\001\037\001\
\038\001\039\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\255\255\051\001\255\255\255\255\
\255\255\255\255\255\255\255\255\058\001\255\255\060\001\255\255\
\255\255\063\001\255\255\255\255\066\001\067\001\068\001\255\255\
\070\001\255\255\255\255\002\001\255\255\075\001\076\001\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\017\001\255\255\255\255\020\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\037\001\038\001\
\039\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\255\255\051\001\255\255\255\255\255\255\
\255\255\255\255\255\255\058\001\255\255\060\001\255\255\255\255\
\063\001\255\255\255\255\066\001\067\001\068\001\255\255\070\001\
\255\255\255\255\002\001\255\255\075\001\076\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\255\255\051\001\255\255\255\255\255\255\255\255\
\255\255\255\255\058\001\255\255\060\001\255\255\255\255\063\001\
\255\255\255\255\066\001\067\001\068\001\255\255\070\001\255\255\
\255\255\002\001\255\255\075\001\076\001\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\013\001\255\255\255\255\255\255\
\017\001\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\038\001\039\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\255\255\051\001\255\255\255\255\255\255\255\255\255\255\
\255\255\058\001\255\255\060\001\255\255\255\255\063\001\255\255\
\255\255\066\001\067\001\068\001\255\255\070\001\255\255\255\255\
\002\001\255\255\075\001\076\001\006\001\007\001\008\001\009\001\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\017\001\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\255\255\051\001\255\255\255\255\255\255\255\255\255\255\255\255\
\058\001\255\255\060\001\255\255\255\255\063\001\255\255\255\255\
\066\001\067\001\068\001\255\255\070\001\255\255\255\255\002\001\
\255\255\075\001\076\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\013\001\255\255\255\255\255\255\017\001\255\255\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\036\001\037\001\038\001\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\255\255\
\051\001\255\255\255\255\255\255\255\255\255\255\255\255\058\001\
\255\255\060\001\255\255\255\255\063\001\255\255\255\255\066\001\
\067\001\068\001\255\255\070\001\255\255\255\255\002\001\255\255\
\075\001\076\001\006\001\007\001\008\001\009\001\255\255\255\255\
\255\255\013\001\255\255\255\255\255\255\017\001\255\255\255\255\
\020\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\037\001\038\001\039\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\049\001\255\255\051\001\
\255\255\255\255\255\255\255\255\255\255\255\255\058\001\255\255\
\060\001\255\255\255\255\063\001\255\255\255\255\066\001\067\001\
\068\001\255\255\070\001\255\255\255\255\002\001\255\255\075\001\
\076\001\006\001\007\001\008\001\009\001\255\255\255\255\255\255\
\013\001\255\255\255\255\255\255\017\001\255\255\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\038\001\039\001\255\255\255\255\255\255\255\255\255\255\
\255\255\002\001\255\255\255\255\049\001\255\255\051\001\008\001\
\009\001\255\255\255\255\255\255\255\255\058\001\255\255\060\001\
\255\255\255\255\063\001\020\001\255\255\066\001\067\001\068\001\
\255\255\070\001\255\255\255\255\255\255\255\255\075\001\076\001\
\255\255\255\255\255\255\036\001\037\001\038\001\039\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\255\255\255\255\255\255\255\255\255\255\002\001\003\001\
\255\255\005\001\255\255\060\001\008\001\009\001\063\001\255\255\
\012\001\066\001\014\001\015\001\016\001\255\255\255\255\255\255\
\020\001\021\001\255\255\076\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\032\001\255\255\034\001\255\255\
\036\001\037\001\038\001\039\001\255\255\255\255\255\255\043\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\003\001\
\060\001\005\001\255\255\063\001\008\001\009\001\066\001\255\255\
\012\001\255\255\014\001\015\001\016\001\073\001\255\255\255\255\
\020\001\021\001\255\255\255\255\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\032\001\255\255\034\001\255\255\
\036\001\037\001\038\001\039\001\255\255\255\255\255\255\043\001\
\255\255\255\255\002\001\255\255\255\255\255\255\255\255\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\014\001\255\255\
\060\001\255\255\255\255\063\001\020\001\021\001\066\001\255\255\
\024\001\025\001\026\001\027\001\255\255\073\001\255\255\255\255\
\032\001\255\255\002\001\255\255\036\001\037\001\038\001\039\001\
\008\001\009\001\255\255\043\001\002\001\255\255\255\255\255\255\
\255\255\255\255\008\001\009\001\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\020\001\063\001\
\255\255\255\255\066\001\255\255\036\001\037\001\038\001\039\001\
\255\255\073\001\255\255\255\255\255\255\255\255\036\001\037\001\
\038\001\039\001\255\255\255\255\255\255\255\255\054\001\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\004\001\063\001\
\255\255\255\255\066\001\255\255\010\001\011\001\060\001\255\255\
\255\255\063\001\255\255\255\255\066\001\019\001\255\255\255\255\
\022\001\023\001\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\255\255\033\001\255\255\035\001\036\001\255\255\
\255\255\255\255\255\255\255\255\255\255\004\001\255\255\255\255\
\255\255\255\255\255\255\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\255\255\060\001\022\001\
\023\001\063\001\255\255\255\255\066\001\028\001\029\001\030\001\
\031\001\255\255\033\001\004\001\035\001\255\255\255\255\255\255\
\255\255\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\255\255\028\001\255\255\060\001\031\001\255\255\
\063\001\255\255\035\001\066\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\060\001\255\255\255\255\063\001\255\255\
\255\255\066\001"

let yynames_const = "\
  "

let yynames_block = "\
  TYPE\000\
  INERT\000\
  LAMBDA\000\
  TTOP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  TBOT\000\
  LET\000\
  IN\000\
  FIX\000\
  LETREC\000\
  CASE\000\
  OF\000\
  AS\000\
  USTRING\000\
  UNIT\000\
  REF\000\
  UUNIT\000\
  RREF\000\
  TIMESFLOAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  UFLOAT\000\
  SSOURCE\000\
  SSINK\000\
  NAT\000\
  MVAR\000\
  MMVAR\000\
  FORK\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  EQLLT\000\
  KNDU\000\
  KNDA\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 138 "parser.mly"
      ( fun ctx -> [],ctx )
# 762 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 140 "parser.mly"
      ( fun ctx ->
          let cmd, ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 774 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 148 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 781 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 150 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 789 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 152 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 797 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 156 "parser.mly"
      ( KndU )
# 804 "parser.ml"
               : 'Kind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 158 "parser.mly"
      ( KndA )
# 811 "parser.ml"
               : 'Kind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 163 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 819 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 165 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 827 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 170 "parser.mly"
                ( _1 )
# 834 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 172 "parser.mly"
      ( fun ctx -> TyRef(_2 ctx) )
# 842 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 174 "parser.mly"
      ( fun ctx -> TyMvar(_2 ctx))
# 850 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 176 "parser.mly"
      ( fun ctx -> TySource(_2 ctx) )
# 858 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 178 "parser.mly"
      ( fun ctx -> TySink(_2 ctx) )
# 866 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 183 "parser.mly"
           ( _2 )
# 875 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 185 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 886 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 191 "parser.mly"
      ( fun ctx -> TyTop )
# 893 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 193 "parser.mly"
      ( fun ctx -> TyBool )
# 900 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 195 "parser.mly"
      ( fun ctx -> TyBot )
# 907 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 197 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 917 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 200 "parser.mly"
      ( fun ctx ->
          TyVariant(_2 ctx 1) )
# 927 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 203 "parser.mly"
      ( fun ctx -> TyString )
# 934 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 205 "parser.mly"
      ( fun ctx -> TyUnit )
# 941 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 207 "parser.mly"
      ( fun ctx -> TyFloat )
# 948 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 209 "parser.mly"
      ( fun ctx -> TyNat )
# 955 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    Obj.repr(
# 213 "parser.mly"
      ( fun ctx -> TyVarBind )
# 961 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 215 "parser.mly"
      ( fun ctx -> TyAbbBind(_2 ctx) )
# 969 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Kind) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 221 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _6 ctx, _4) )
# 981 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 223 "parser.mly"
            ( _1 )
# 988 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 227 "parser.mly"
      ( _1 )
# 995 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 229 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx1) )
# 1009 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 233 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )
# 1023 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 237 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 1035 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 239 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 1047 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 241 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 1059 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 243 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 1076 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 248 "parser.mly"
      ( fun ctx ->
          TmCase(_1, _2 ctx, _4 ctx) )
# 1087 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 251 "parser.mly"
      ( fun ctx -> TmAssign(_2, _1 ctx, _3 ctx) )
# 1096 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 253 "parser.mly"
      ( fun ctx -> TmAssignMvar(_2, _1 ctx, _3 ctx) )
# 1105 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TermProduct) in
    Obj.repr(
# 255 "parser.mly"
      ( fun ctx -> TmFork(_1, _2 ctx) )
# 1113 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 259 "parser.mly"
      ( _1 )
# 1120 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 261 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 1131 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 266 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 1140 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 269 "parser.mly"
      ( fun ctx -> TmRef(_1, _2 ctx) )
# 1148 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 271 "parser.mly"
      ( fun ctx -> TmMvar(_1, _2 ctx) )
# 1156 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 273 "parser.mly"
      ( fun ctx -> TmDeref(_1, _2 ctx) )
# 1164 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 275 "parser.mly"
      ( fun ctx -> TmDeMvar(_1, _2 ctx) )
# 1172 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 277 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 1181 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 279 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 1189 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 281 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 1197 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 283 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 1205 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 287 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 1215 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 290 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 1225 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 293 "parser.mly"
      ( _1 )
# 1232 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 297 "parser.mly"
      ( fun ctx i -> [] )
# 1238 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 299 "parser.mly"
      ( _1 )
# 1245 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 303 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1252 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 305 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1261 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 309 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1270 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 311 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1277 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 315 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 1286 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 317 "parser.mly"
      ( _1 )
# 1293 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 321 "parser.mly"
      ( _1 )
# 1300 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 323 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, "_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 1310 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 328 "parser.mly"
      ( fun ctx -> TmProduct(_1, _2 ctx, _4 ctx) )
# 1321 "parser.ml"
               : 'TermProduct))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 333 "parser.mly"
      ( _2 )
# 1330 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 335 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1340 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 337 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1348 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 340 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1355 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 342 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1362 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TermProduct) in
    Obj.repr(
# 344 "parser.mly"
      ( fun ctx -> _1 ctx )
# 1369 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 346 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1379 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 349 "parser.mly"
      ( fun ctx ->
          TmTag(_1, _2.v, _4 ctx, _7 ctx) )
# 1393 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 352 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1400 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 354 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1407 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 356 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1414 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 358 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1425 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 366 "parser.mly"
      ( fun ctx i -> [] )
# 1431 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 368 "parser.mly"
      ( _1 )
# 1438 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 372 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1445 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 374 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1454 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 378 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1463 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 380 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1470 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 384 "parser.mly"
      ( fun ctx -> [_1 ctx] )
# 1477 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 386 "parser.mly"
      ( fun ctx -> (_1 ctx) :: (_3 ctx) )
# 1486 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 390 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _4.v in
          (_2.v, (_4.v, _7 ctx1)) )
# 1501 "parser.ml"
               : 'Case))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
